# -*- coding: utf-8 -*-
"""
step04_axis_dot

1. 축(axis) : 행축, 열축
2. 행렬곱 연산 : np.dot()
    X1, X2 -> a1, a2 (a=기울기,b=절편)
    model = [X1*a1 + X2*a2] + b
    
    - 회귀방정식 에서 행렬곱 예) 
        model = np.dot(X, a) + b
    - 신경망 에서 행렬곱 예)
        [X*w] + b
"""
import numpy as np



# 1. 축(axis) : 행축, 열축
''' 행 축 : 동일한 열의 모음(axis=0) -> 열 단위
    열 축 : 동일한 행의 모음(axis=1) -> 행 단위 '''
arr2d = np.random.randn(5,4)
arr2d
print('전체 원소 합계 :', arr2d.sum()) 
# 전체 원소 합계 : 6.373608976649415
print('각 행 단위 합계 :', arr2d.sum(axis=1))
# 각 행 단위 합계 : [-1.0557008   1.29570182 -0.24840783  3.59149452  2.79052127]
print('각 열 단위 합계 :', arr2d.sum(axis=0))
# 각 열 단위 합계 : [1.43644635 3.25977327 0.14416501 1.53322435]



# 2. 행렬곱 연산 : np.dot()
''' np.dot(X, a) 전제조건 
    1. X, a : 행렬 구조
    2. 수일치 : X열 차수 = a행 차수 '''


# 2-1) X, a 예측

# 2-1-1) X 생성
X = np.array([[2, 3], [2.5, 3]])
X.shape # (2, 2)
X
''' array([[2. , 3. ],
           [2.5, 3. ]]) '''

# 2-1-2) a(기울기) 생성
a = np.array([[0.1], [0.05]]) # (2, 1)
a.shape # (2, 1)
a
''' array([[0.1 ],
           [0.05]])  '''

# 2-1-3) 예측치 = y
y_pred = np.dot(X, a) 
y_pred 
''' array([[0.35],
           [0.4 ]])   '''


# 2-2) X, a, b 예측

# 2-2-1) X 생성
X = np.array([[2, 3], [2.5, 3]])
X.shape # (2, 2)
X
''' array([[2. , 3. ],
           [2.5, 3. ]]) '''

# 2-2-2) a(기울기), b(절편) 생성
a = np.array([[0.1], [0.05]]) # (2, 1)
a.shape # (2, 1)
a
''' array([[0.1 ],
           [0.05]])  '''
b = 0.1 

# 2-2-3) 예측치 = y
y_pred = np.dot(X, a) + b
y_pred 
''' array([[0.45],
           [0.5 ]])   '''


# 실습[p.60]
X = np.array([[0.1, 0.2], [0.3, 0.4]])
X.shape # (2, 2)
X
''' array([[0.1, 0.2],
           [0.3, 0.4]])  '''
w = np.array([[1, 2, 3], [2, 3, 4]])
w.shape # (2, 3)
w
''' array([[1, 2, 3],
           [2, 3, 4]])  '''
# 행렬곱
h = np.dot(X, w)
h.shape # (2, 3)
h
''' array([[0.5, 0.8, 1.1],
           [1.1, 1.8, 2.5]])  '''





